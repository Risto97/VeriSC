@PACKAGE_INIT@
# include( "${CMAKE_CURRENT_LIST_DIR}/@PROJECT_NAME@Config.cmake" )
check_required_components("@PROJECT_NAME@")

if(NOT DEFINED ENV{SCV})
    message(STATUS "\n\n?????Forgot to source the setup.sh with environment variables???????\n\n")
    message(FATAL_ERROR "SystemC Verification Library environment variable $SCV not set, it should point to SCV root directory")
endif()
if(NOT DEFINED ENV{SYSTEMC_UVM})
    message(STATUS "\n\n?????Forgot to source the setup.sh with environment variables???????\n\n")
    message(FATAL_ERROR "FC4SC library environment variable $FC4SC not set, it should point to FC4SC root directory")
endif()
if(NOT DEFINED ENV{FC4SC})
    message(STATUS "\n\n?????Forgot to source the setup.sh with environment variables???????\n\n")
    message(FATAL_ERROR "FC4SC library environment variable $FC4SC not set, it should point to FC4SC root directory")
endif()
if(NOT DEFINED ENV{SYSTEMC})
    message(STATUS "\n\n?????Forgot to source the setup.sh with environment variables???????\n\n")
    message(FATAL_ERROR "SystemC Library environment variable $SYSTEMC not set, it should point to SYSTEMC root directory")
endif()
if(NOT DEFINED ENV{SCT_HOME})
    message(STATUS "\n\n?????Forgot to source the setup.sh with environment variables???????\n\n")
    message(FATAL_ERROR "SystemC compiler Library environment variable $SCT_HOME not set, it should point to SystemC compiler root directory")
endif()
if(NOT DEFINED ENV{VERILATOR_ROOT})
    message(STATUS "\n\n?????Forgot to source the setup.sh with environment variables???????\n\n")
    message(FATAL_ERROR "VERILATOR environment variable $VERILATOR_ROOT not set, it should point to Verilator root directory")
endif()

set(@PROJECT_NAME@_FOUND 1)

# specify the C++ standard
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED True)

if (USE_VERILATOR)
    find_package(verilator HINTS $ENV{VERILATOR_ROOT} ${VERILATOR_ROOT})
    if (NOT verilator_FOUND)
      message(FATAL_ERROR "Verilator was not found. Either install it, or set the VERILATOR_ROOT environment variable")
    endif()
endif()

# SystemC dependencies
set(THREADS_PREFER_PTHREAD_FLAG ON)
find_package(Threads REQUIRED)

# Find SystemC using SystemC's CMake integration
set(CMAKE_PREFIX_PATH "${SYSTEMC}" "${SYSTEMC}/build")
find_package(SystemCLanguage CONFIG REQUIRED)
if (NOT SystemCLanguage_FOUND)
    message(FATAL_ERROR "SystemC not found")
endif()

set(@PROJECT_NAME@_object   "@PROJECT_BINARY_DIR@/lib@PROJECT_NAME@.a" )
list(APPEND SC_UVM_env_TOOL_LIBS "$ENV{SCV}/objdir/src/scv/.libs/libscv.so")
list(APPEND SC_UVM_env_TOOL_LIBS "$ENV{SYSTEMC_UVM}/lib-linux64/libuvm-systemc.so")
list(APPEND SC_UVM_env_TOOL_LIBS SystemC::systemc)

list(APPEND SC_UVM_env_libs ${SC_UVM_env_object})
list(APPEND SC_UVM_env_libs ${SC_UVM_env_TOOL_LIBS})

set(@PROJECT_NAME@_libs_include_dirs "@LIB_INCLUDE_DIRS@" )
list(APPEND SC_UVM_env_TOOL_INC_DIRS "$ENV{SYSTEMC_UVM}/include")
list(APPEND SC_UVM_env_TOOL_INC_DIRS "$ENV{SCV}/src")
list(APPEND SC_UVM_env_TOOL_INC_DIRS "$ENV{FC4SC}/includes")
list(APPEND SC_UVM_env_TOOL_INC_DIRS "$ENV{SCT_HOME}/components/common/sctcommon/")


list(APPEND SC_UVM_env_include_dirs ${SC_UVM_env_libs_include_dirs})
list(APPEND SC_UVM_env_include_dirs ${SC_UVM_env_TOOL_INC_DIRS})
if (USE_VERILATOR)
    list(APPEND SC_UVM_env_include_dirs "${VERILATOR_ROOT}/include")
endif()

# Custom makefile targets

# Run the simulation executable after build with make run
add_custom_target(run
                COMMAND ${PROJECT_NAME}
                DEPENDS ${PROJECT_NAME}
                )

# Open the trace files with gtkwave
add_custom_target(vcd
    COMMAND python $ENV{SC_UVM_ENV_HOME}/scripts/open_vcd_files_in_dir.py
                )
# Open a CLI menu to pick a gtkw file from projects uvm/waves directory
# make wave
add_custom_target(wave
    COMMAND python $ENV{SC_UVM_ENV_HOME}/scripts/pick_gtkw_file.py -d ${PROJECT_SOURCE_DIR}/waves
                )

# Open a wave file in uvm/waves with a filename $f
# make wavef f=wave5.gtkw
add_custom_target(wavef
    COMMAND python $ENV{SC_UVM_ENV_HOME}/scripts/pick_gtkw_file.py -f ${PROJECT_SOURCE_DIR}/waves/$(f)
    )
